<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/aop 
	   					   http://www.springframework.org/schema/aop/spring-aop-3.0.xsd   
	   					   http://www.springframework.org/schema/beans 
	   					   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd   
	   					   http://www.springframework.org/schema/context 
	   					   http://www.springframework.org/schema/context/spring-context-3.0.xsd   
	   					   http://www.springframework.org/schema/jee 
	   					   http://www.springframework.org/schema/jee/spring-jee-3.0.xsd   
	   					   http://www.springframework.org/schema/tx 
	   					   http://www.springframework.org/schema/tx/spring-tx-3.0.xsd"
	   					   
	default-init-method="init" default-destroy-method="destroy">
	
	<!--  
		I metodi init e destroy vengono chiamati per:
		1. inizializzare i bean (init)
		2. eseguire codice prima della distruzione del contesto (destroy).
		   Il metodo destroy non viene chiamato per bean con scope PROTOTYPE.
	-->

	<!-- Bean1 dipende dal bean printer tramite costructor-injection -->
	<bean id="ref1" class="it.clever.spring.ui.Bean1" scope="prototype">
		<constructor-arg ref="consolePrinter" ></constructor-arg>
	</bean>
	<!-- Bean1 dipende dal bean printer tramite costructor-injection -->
	<bean id="ref2" class="it.clever.spring.ui.Bean1" scope="prototype">
		<property name="factoryService" ref="factoryService" ></property>
		<constructor-arg index="1" ref="consolePrinter"></constructor-arg>
		<constructor-arg index="2" ref="fileprinter"></constructor-arg>
	</bean>
	
	<!-- 
		Viene creata una nuova istanza di Bean2 con iniezione della dipendenza da bean1 
		tramite setter-injection.
		Per le applicazioni desktop, gli scope sono:
		1. prototype: ogni volta creata e distrutta una nuova istanza
		2. singleton: viene creata una unica istanza e messa nel contesto tramite il suo alias 
	-->
	<bean id="bean2" class="it.clever.spring.ui.Bean2" scope="prototype">
		<property name="bean1" ref="ref1"></property>
	</bean>
	
	<!-- Definzione della factory come bean -->
	<bean id="factoryService" class="it.clever.spring.factory.PrinterFactory"
		scope="prototype" />

	<!-- 
		Ogni nuova istanza di un Printer (gestita come interfaccia viene creata 
		a partire dalla factory a seconda del parametro di controllo passato.
		buildService e factoryService sono dei metodi OPZIONALI configurati come 
		metodi di inzializzazione e ditruzione del bean dal contesto.
		Molto spesso un singleton può avere necessità di inzizalizzazre 
		e terminare risorse.
	 -->
	<bean id="consolePrinter" class="it.clever.spring.factory.Printer"
		scope="singleton" init-method="createService" destroy-method="terminateService"
		
		factory-method="buildService" factory-bean="factoryService">
		
		<!-- Ha la stessa funzionalità utilizzata nei costruttori -->
		<constructor-arg value="0" type="java.lang.Integer"></constructor-arg>
	</bean>
	
	<bean id="filePrinter" class="it.clever.spring.factory.Printer"
		scope="singleton" init-method="createService" destroy-method="terminateService"
		
		factory-method="buildService" factory-bean="factoryService">
		
		<!-- Ha la stessa funzionalità utilizzata nei costruttori -->
		<constructor-arg value="1" type="java.lang.Integer"></constructor-arg>
	</bean>
	
	<bean id="class2" class="it.clever.spring.ui.Class2" scope="prototype">
		<property name="c1" ref="class1"></property>
	</bean>
	
	<bean id="class1" class="it.clever.spring.ui.Class1" scope="prototype">
	</bean>
</beans>